// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode
    Not(in=instruction[15], out=flgAC);
    // C命令のとき(15ビット目が1)はcomp,dest,jumpの値を取得する
    And(a=instruction[15], b=true, out=tmpFlgAC);
    And(a=instruction[12], b=tmpFlgAC, out=compA);
    And(a=instruction[11], b=tmpFlgAC, out=compC1);
    And(a=instruction[10], b=tmpFlgAC, out=compC2);
    And(a=instruction[9], b=tmpFlgAC, out=compC3);
    And(a=instruction[8], b=tmpFlgAC, out=compC4);
    And(a=instruction[7], b=tmpFlgAC, out=compC5);
    And(a=instruction[6], b=tmpFlgAC, out=compC6);
    And(a=instruction[5], b=tmpFlgAC, out=compD1);
    And(a=instruction[4], b=tmpFlgAC, out=compD2);
    And(a=instruction[3], b=tmpFlgAC, out=compD3);
    And(a=instruction[2], b=tmpFlgAC, out=compJ1);
    And(a=instruction[1], b=tmpFlgAC, out=compJ2);
    And(a=instruction[0], b=tmpFlgAC, out=compJ3);

    // A Register
    // set ddressM
    Mux16(a=outALUM, b=instruction, sel=flgAC, out=inARegister);
    // ↓これが必要だった A命令のときは無条件に前回の値を呼び出す
    Or(a=flgAC, b=compD1, out=intoA);
    ARegister(in=inARegister, load=intoA, out=outARegister, out[0..14]=addressM);

    // ALU
    Mux16(a=outARegister, b=inM, sel=compA, out=inALU);
    ALU(x=outDRegister, y=inALU, zx=compC1, nx=compC2, zy=compC3, ny=compC4, f=compC5, no=compC6, out=outALUM, out=outM, zr=zr, ng=ng);

    // D Register
    DRegister(in=outALUM, load=compD2, out=outDRegister);

    // writeM
    And(a=compD3, b=true, out=writeM);

    // PC
    Not(in=ng, out=pos);
    Not(in=zr, out=nzr);

    And(a=compJ1, b=ng, out=tmpJmpJ1);
    And(a=compJ2, b=zr, out=tmpJmpJ2);

    And(a=pos, b=nzr, out=posNzr);
    And(a=compJ3, b=posNzr, out=tmpJmpJ3);
    
    Or(a=tmpJmpJ1, b=tmpJmpJ2, out=tmpJmpJ1J2);
    Or(a=tmpJmpJ1J2, b=tmpJmpJ3, out=jmp);
    
    PC(in=outARegister, load=jmp, inc=true, reset=reset, out[0..14]=pc);

}